version: "3.5"
services:
  proxy:
    image: jwilder/nginx-proxy:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    environment:
      # Si se apunta usando un host que no coincida con ningun virtualhost
      # en lugar de error mostrar el que sea default
      - DEFAULT_HOST=default
    labels:
      # Este label es necesario para que letsencrypt companion
      # sepa que le tiene que prestar atencion a este container
      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: "true"
    volumes:
      # Si le voy a meter solo un archivo no vale la pena hacer mi propia
      # imagen de proxy. Uso la oficial actualizada y le monto el archivo de
      # config al ejecutar.
      - $PWD/custom.conf:/etc/nginx/conf.d/custom.conf
      - certs:/etc/nginx/certs:ro
      - vhostd:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - proxynet
      - default

  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    restart: always
    volumes:
      - certs:/etc/nginx/certs
      - vhostd:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - proxy
    depends_on:
      - proxynet

networks:
  proxy:
    # El nombre es necesario porque por default compose agrega el nombre del
    # directorio de compose delante del nombre de la red y esta red tiene que
    # ser la misma para varios composes.
    # Para que esto funcione la version de compose tiene que ser al menos 3.5
    name: proxynet

# Los volumenes se necesitan para compartir entre proxy y letsencrypt
# y para que entre ejecuciones persistan los certificados.
# Los dejo con driver por default porque no hace falta hacerles backup y si se
# perdieran se generan de nuevo y listo.
volumes:
  certs:
  vhostd:
  html:
